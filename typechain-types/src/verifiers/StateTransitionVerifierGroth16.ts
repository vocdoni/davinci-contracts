/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface StateTransitionVerifierGroth16Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "compressProof"
      | "provingKeyHash"
      | "verifyCompressedProof"
      | "verifyProof(bytes,bytes)"
      | "verifyProof(uint256[8],uint256[2],uint256[2],uint256[4])"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "compressProof",
    values: [
      BigNumberish[],
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "provingKeyHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyCompressedProof",
    values: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish],
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof(bytes,bytes)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof(uint256[8],uint256[2],uint256[2],uint256[4])",
    values: [
      BigNumberish[],
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "compressProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "provingKeyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyCompressedProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof(bytes,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof(uint256[8],uint256[2],uint256[2],uint256[4])",
    data: BytesLike
  ): Result;
}

export interface StateTransitionVerifierGroth16 extends BaseContract {
  connect(runner?: ContractRunner | null): StateTransitionVerifierGroth16;
  waitForDeployment(): Promise<this>;

  interface: StateTransitionVerifierGroth16Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  compressProof: TypedContractMethod<
    [
      proof: BigNumberish[],
      commitments: [BigNumberish, BigNumberish],
      commitmentPok: [BigNumberish, BigNumberish]
    ],
    [
      [[bigint, bigint, bigint, bigint], [bigint], bigint] & {
        compressed: [bigint, bigint, bigint, bigint];
        compressedCommitments: [bigint];
        compressedCommitmentPok: bigint;
      }
    ],
    "view"
  >;

  provingKeyHash: TypedContractMethod<[], [string], "view">;

  verifyCompressedProof: TypedContractMethod<
    [
      compressedProof: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      compressedCommitments: [BigNumberish],
      compressedCommitmentPok: BigNumberish,
      input: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ],
    [void],
    "view"
  >;

  "verifyProof(bytes,bytes)": TypedContractMethod<
    [_proof: BytesLike, _input: BytesLike],
    [void],
    "view"
  >;

  "verifyProof(uint256[8],uint256[2],uint256[2],uint256[4])": TypedContractMethod<
    [
      proof: BigNumberish[],
      commitments: [BigNumberish, BigNumberish],
      commitmentPok: [BigNumberish, BigNumberish],
      input: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ],
    [void],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "compressProof"
  ): TypedContractMethod<
    [
      proof: BigNumberish[],
      commitments: [BigNumberish, BigNumberish],
      commitmentPok: [BigNumberish, BigNumberish]
    ],
    [
      [[bigint, bigint, bigint, bigint], [bigint], bigint] & {
        compressed: [bigint, bigint, bigint, bigint];
        compressedCommitments: [bigint];
        compressedCommitmentPok: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "provingKeyHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifyCompressedProof"
  ): TypedContractMethod<
    [
      compressedProof: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      compressedCommitments: [BigNumberish],
      compressedCommitmentPok: BigNumberish,
      input: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyProof(bytes,bytes)"
  ): TypedContractMethod<
    [_proof: BytesLike, _input: BytesLike],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyProof(uint256[8],uint256[2],uint256[2],uint256[4])"
  ): TypedContractMethod<
    [
      proof: BigNumberish[],
      commitments: [BigNumberish, BigNumberish],
      commitmentPok: [BigNumberish, BigNumberish],
      input: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ],
    [void],
    "view"
  >;

  filters: {};
}
