package contracts

// This file is auto-generated by helpers/write_contract_addresses.sh
// Do not edit manually - run the script to regenerate
// Generated from commit: bf3f1b4be77b9ca3b8b4f4991b8715f478df5211

// Network constants
const (
	SepoliaNetwork = "sepolia"
	UzhNetwork     = "uzh"
	MainnetNetwork = "mainnet"
	CeloNetwork    = "celo"
	TestNetwork    = "test"
)

// AvailableNetworksByName contains the list of networks where Davinci is deployed.
var AvailableNetworksByName = map[string]uint32{
	SepoliaNetwork:  11155111,
	UzhNetwork:      710,
	CeloNetwork:     42220,
	MainnetNetwork:  1,
	TestNetwork:     1337, // Local test network
}

// AvailableNetworksByID contains the list of networks where Davinci is deployed.
var AvailableNetworksByID = map[uint32]string{
	11155111: SepoliaNetwork,
	710:      UzhNetwork,
	42220:    CeloNetwork,
	1:        MainnetNetwork,
	1337:     TestNetwork,
}

// Contract name constants
const (
	ProcessRegistryContract                = "processRegistry"
	OrganizationRegistryContract           = "organizationRegistry"
	StateTransitionVerifierGroth16Contract = "stateTransitionVerifierGroth16"
	ResultsVerifierGroth16Contract         = "resultsVerifierGroth16"
	SequencerRegistryContract              = "sequencerRegistry"
)

// Contract addresses by network
const (
	OrganizationRegistryCeloAddress = "0x4FEc6320A1e73820e04364E92f313E8b0d7C3238"
	OrganizationRegistryMainnetAddress = "0x0"
	OrganizationRegistrySepoliaAddress = "0xB28014f7f122447Fb810829E0a1f6204E4D7b065"
	OrganizationRegistryUzhAddress = "0xf7BCE4546805547bE526Ca864d6722Ed193E51Aa"
	ProcessRegistryCeloAddress = "0x339E16CF6C084789F231C5Ccde969797279D9C8F"
	ProcessRegistryMainnetAddress = "0x0"
	ProcessRegistrySepoliaAddress = "0xD10DCD1e99eF812e2BA2adEdce0dE8b261d6cbaB"
	ProcessRegistryUzhAddress = "0x69B16f67Bd2fB18bD720379E9C1Ef5EaD3872d67"
	ResultsVerifierGroth16CeloAddress = "0x7E42F542365b4bb1643Ae6411004EF76a0CCedF1"
	ResultsVerifierGroth16MainnetAddress = "0x0"
	ResultsVerifierGroth16SepoliaAddress = "0xC802a928230e1A87cd36A81C09B282509Fd59E94"
	ResultsVerifierGroth16UzhAddress = "0x00c7F87731346F592197E49A90Ad6EC236Ad9985"
	SequencerRegistryCeloAddress = "0x0"
	SequencerRegistryMainnetAddress = "0x0"
	SequencerRegistrySepoliaAddress = "0x0"
	SequencerRegistryUzhAddress = "0x0"
	StateTransitionVerifierGroth16CeloAddress = "0xED7A5A2b67a674617209291e2EE3346C535BebD0"
	StateTransitionVerifierGroth16MainnetAddress = "0x0"
	StateTransitionVerifierGroth16SepoliaAddress = "0x63912eC2A99f107328BCeFB762F61F4ecD0a11cb"
	StateTransitionVerifierGroth16UzhAddress = "0x5e4673CD378F05cc3Ae25804539c91E711548741"
)

// GetContractAddress returns the address for a given contract and network
func GetContractAddress(contract, network string) string {
	switch contract {
	case ProcessRegistryContract:
		switch network {
		case SepoliaNetwork:
			return ProcessRegistrySepoliaAddress
		case UzhNetwork:
			return ProcessRegistryUzhAddress
		case MainnetNetwork:
			return ProcessRegistryMainnetAddress
		case CeloNetwork:
			return ProcessRegistryCeloAddress
		}
	case OrganizationRegistryContract:
		switch network {
		case SepoliaNetwork:
			return OrganizationRegistrySepoliaAddress
		case UzhNetwork:
			return OrganizationRegistryUzhAddress
		case MainnetNetwork:
			return OrganizationRegistryMainnetAddress
		case CeloNetwork:
			return OrganizationRegistryCeloAddress
		}
	case StateTransitionVerifierGroth16Contract:
		switch network {
		case SepoliaNetwork:
			return StateTransitionVerifierGroth16SepoliaAddress
		case UzhNetwork:
			return StateTransitionVerifierGroth16UzhAddress
		case MainnetNetwork:
			return StateTransitionVerifierGroth16MainnetAddress
		case CeloNetwork:
			return StateTransitionVerifierGroth16CeloAddress
		}
	case ResultsVerifierGroth16Contract:
		switch network {
		case SepoliaNetwork:
			return ResultsVerifierGroth16SepoliaAddress
		case UzhNetwork:
			return ResultsVerifierGroth16UzhAddress
		case MainnetNetwork:
			return ResultsVerifierGroth16MainnetAddress
		case CeloNetwork:
			return ResultsVerifierGroth16CeloAddress
		}
	case SequencerRegistryContract:
		switch network {
		case SepoliaNetwork:
			return SequencerRegistrySepoliaAddress
		case UzhNetwork:
			return SequencerRegistryUzhAddress
		case MainnetNetwork:
			return SequencerRegistryMainnetAddress
		case CeloNetwork:
			return SequencerRegistryCeloAddress
		}
	}
	return ""
}

// GetAllContractAddresses returns a map of all contract addresses for a given network
func GetAllContractAddresses(network string) map[string]string {
	addresses := make(map[string]string)
	
	contracts := []string{
		ProcessRegistryContract,
		OrganizationRegistryContract,
		StateTransitionVerifierGroth16Contract,
		ResultsVerifierGroth16Contract,
		SequencerRegistryContract,
	}
	
	for _, contract := range contracts {
		if addr := GetContractAddress(contract, network); addr != "" && addr != "0x0" {
			addresses[contract] = addr
		}
	}
	
	return addresses
}

// GetSepoliaAddresses returns all contract addresses for Sepolia network
func GetSepoliaAddresses() map[string]string {
	return GetAllContractAddresses(SepoliaNetwork)
}

// GetUzhAddresses returns all contract addresses for UZH network
func GetUzhAddresses() map[string]string {
	return GetAllContractAddresses(UzhNetwork)
}

// GetMainnetAddresses returns all contract addresses for Mainnet network
func GetMainnetAddresses() map[string]string {
	return GetAllContractAddresses(MainnetNetwork)
}

// GetCeloAddresses returns all contract addresses for Celo network
func GetCeloAddresses() map[string]string {
	return GetAllContractAddresses(CeloNetwork)
}
