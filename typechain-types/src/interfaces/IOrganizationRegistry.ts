/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IOrganizationRegistry {
  export type OrganizationStruct = {
    name: string;
    metadataURI: string;
    administrators: AddressLike[];
  };

  export type OrganizationStructOutput = [
    name: string,
    metadataURI: string,
    administrators: string[]
  ] & { name: string; metadataURI: string; administrators: string[] };
}

export interface IOrganizationRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAdministrator"
      | "createOrganization"
      | "deleteOrganization"
      | "exists"
      | "getOrganization"
      | "isAdministrator"
      | "removeAdministrator"
      | "updateOrganization"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdministratorAdded"
      | "AdministratorRemoved"
      | "OrganizationCreated"
      | "OrganizationUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAdministrator",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrganization",
    values: [string, string, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteOrganization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "exists", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "getOrganization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdministrator",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdministrator",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOrganization",
    values: [AddressLike, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAdministrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAdministrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdministrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOrganization",
    data: BytesLike
  ): Result;
}

export namespace AdministratorAddedEvent {
  export type InputTuple = [id: AddressLike, administrator: AddressLike];
  export type OutputTuple = [id: string, administrator: string];
  export interface OutputObject {
    id: string;
    administrator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdministratorRemovedEvent {
  export type InputTuple = [
    id: AddressLike,
    administrator: AddressLike,
    remover: AddressLike
  ];
  export type OutputTuple = [
    id: string,
    administrator: string,
    remover: string
  ];
  export interface OutputObject {
    id: string;
    administrator: string;
    remover: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrganizationCreatedEvent {
  export type InputTuple = [id: AddressLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrganizationUpdatedEvent {
  export type InputTuple = [id: AddressLike, updater: AddressLike];
  export type OutputTuple = [id: string, updater: string];
  export interface OutputObject {
    id: string;
    updater: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IOrganizationRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IOrganizationRegistry;
  waitForDeployment(): Promise<this>;

  interface: IOrganizationRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAdministrator: TypedContractMethod<
    [id: AddressLike, administrator: AddressLike],
    [void],
    "nonpayable"
  >;

  createOrganization: TypedContractMethod<
    [name: string, metadataURI: string, administrators: AddressLike[]],
    [void],
    "nonpayable"
  >;

  deleteOrganization: TypedContractMethod<
    [id: AddressLike],
    [void],
    "nonpayable"
  >;

  exists: TypedContractMethod<[id: AddressLike], [boolean], "view">;

  getOrganization: TypedContractMethod<
    [id: AddressLike],
    [IOrganizationRegistry.OrganizationStructOutput],
    "view"
  >;

  isAdministrator: TypedContractMethod<
    [id: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;

  removeAdministrator: TypedContractMethod<
    [id: AddressLike, administrator: AddressLike],
    [void],
    "nonpayable"
  >;

  updateOrganization: TypedContractMethod<
    [id: AddressLike, name: string, metadataURI: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAdministrator"
  ): TypedContractMethod<
    [id: AddressLike, administrator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createOrganization"
  ): TypedContractMethod<
    [name: string, metadataURI: string, administrators: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteOrganization"
  ): TypedContractMethod<[id: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "exists"
  ): TypedContractMethod<[id: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getOrganization"
  ): TypedContractMethod<
    [id: AddressLike],
    [IOrganizationRegistry.OrganizationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAdministrator"
  ): TypedContractMethod<
    [id: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeAdministrator"
  ): TypedContractMethod<
    [id: AddressLike, administrator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateOrganization"
  ): TypedContractMethod<
    [id: AddressLike, name: string, metadataURI: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdministratorAdded"
  ): TypedContractEvent<
    AdministratorAddedEvent.InputTuple,
    AdministratorAddedEvent.OutputTuple,
    AdministratorAddedEvent.OutputObject
  >;
  getEvent(
    key: "AdministratorRemoved"
  ): TypedContractEvent<
    AdministratorRemovedEvent.InputTuple,
    AdministratorRemovedEvent.OutputTuple,
    AdministratorRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OrganizationCreated"
  ): TypedContractEvent<
    OrganizationCreatedEvent.InputTuple,
    OrganizationCreatedEvent.OutputTuple,
    OrganizationCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OrganizationUpdated"
  ): TypedContractEvent<
    OrganizationUpdatedEvent.InputTuple,
    OrganizationUpdatedEvent.OutputTuple,
    OrganizationUpdatedEvent.OutputObject
  >;

  filters: {
    "AdministratorAdded(address,address)": TypedContractEvent<
      AdministratorAddedEvent.InputTuple,
      AdministratorAddedEvent.OutputTuple,
      AdministratorAddedEvent.OutputObject
    >;
    AdministratorAdded: TypedContractEvent<
      AdministratorAddedEvent.InputTuple,
      AdministratorAddedEvent.OutputTuple,
      AdministratorAddedEvent.OutputObject
    >;

    "AdministratorRemoved(address,address,address)": TypedContractEvent<
      AdministratorRemovedEvent.InputTuple,
      AdministratorRemovedEvent.OutputTuple,
      AdministratorRemovedEvent.OutputObject
    >;
    AdministratorRemoved: TypedContractEvent<
      AdministratorRemovedEvent.InputTuple,
      AdministratorRemovedEvent.OutputTuple,
      AdministratorRemovedEvent.OutputObject
    >;

    "OrganizationCreated(address)": TypedContractEvent<
      OrganizationCreatedEvent.InputTuple,
      OrganizationCreatedEvent.OutputTuple,
      OrganizationCreatedEvent.OutputObject
    >;
    OrganizationCreated: TypedContractEvent<
      OrganizationCreatedEvent.InputTuple,
      OrganizationCreatedEvent.OutputTuple,
      OrganizationCreatedEvent.OutputObject
    >;

    "OrganizationUpdated(address,address)": TypedContractEvent<
      OrganizationUpdatedEvent.InputTuple,
      OrganizationUpdatedEvent.OutputTuple,
      OrganizationUpdatedEvent.OutputObject
    >;
    OrganizationUpdated: TypedContractEvent<
      OrganizationUpdatedEvent.InputTuple,
      OrganizationUpdatedEvent.OutputTuple,
      OrganizationUpdatedEvent.OutputObject
    >;
  };
}
