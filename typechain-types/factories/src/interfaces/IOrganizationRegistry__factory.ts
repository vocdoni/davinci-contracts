/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IOrganizationRegistry,
  IOrganizationRegistryInterface,
} from "../../../src/interfaces/IOrganizationRegistry";

const _abi = [
  {
    inputs: [],
    name: "AlreadyAdministrator",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMetadataURI",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidOrganizationID",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidOrganizationName",
    type: "error",
  },
  {
    inputs: [],
    name: "NotAdministrator",
    type: "error",
  },
  {
    inputs: [],
    name: "OrganizationAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "OrganizationNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "Unauthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "id",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "administrator",
        type: "address",
      },
    ],
    name: "AdministratorAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "id",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "administrator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "remover",
        type: "address",
      },
    ],
    name: "AdministratorRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "id",
        type: "address",
      },
    ],
    name: "OrganizationCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "id",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "updater",
        type: "address",
      },
    ],
    name: "OrganizationUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "id",
        type: "address",
      },
      {
        internalType: "address",
        name: "administrator",
        type: "address",
      },
    ],
    name: "addAdministrator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "metadataURI",
        type: "string",
      },
      {
        internalType: "address[]",
        name: "administrators",
        type: "address[]",
      },
    ],
    name: "createOrganization",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "id",
        type: "address",
      },
    ],
    name: "deleteOrganization",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "id",
        type: "address",
      },
    ],
    name: "exists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "id",
        type: "address",
      },
    ],
    name: "getOrganization",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "metadataURI",
            type: "string",
          },
          {
            internalType: "address[]",
            name: "administrators",
            type: "address[]",
          },
        ],
        internalType: "struct IOrganizationRegistry.Organization",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "id",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isAdministrator",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "id",
        type: "address",
      },
      {
        internalType: "address",
        name: "administrator",
        type: "address",
      },
    ],
    name: "removeAdministrator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "id",
        type: "address",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "metadataURI",
        type: "string",
      },
    ],
    name: "updateOrganization",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IOrganizationRegistry__factory {
  static readonly abi = _abi;
  static createInterface(): IOrganizationRegistryInterface {
    return new Interface(_abi) as IOrganizationRegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IOrganizationRegistry {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as IOrganizationRegistry;
  }
}
