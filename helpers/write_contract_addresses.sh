#!/bin/bash

# Script to generate Go constants from deployed_contracts_addresses.json
# This script reads the JSON file and creates hardcoded address constants

set -euo pipefail

# Check if jq is installed
if ! command -v jq &> /dev/null; then
    echo "Error: jq is required but not installed. Please install jq to run this script."
    exit 1
fi

# Define input and output files
JSON_FILE="deployed_contracts_addresses.json"
OUTPUT_FILE="golang-types/addresses.go"

# Check if JSON file exists
if [ ! -f "$JSON_FILE" ]; then
    echo "Error: $JSON_FILE not found"
    exit 1
fi

echo "Generating Go constants from $JSON_FILE to $OUTPUT_FILE..."

# Create the golang-types directory if it doesn't exist
mkdir -p "$(dirname "$OUTPUT_FILE")"

# Get current git commit hash
COMMIT_HASH=$(git rev-parse HEAD 2>/dev/null || echo "unknown")

# Start generating the Go file
cat > "$OUTPUT_FILE" << EOF
package contracts

// This file is auto-generated by helpers/write_contract_addresses.sh
// Do not edit manually - run the script to regenerate
// Generated from commit: $COMMIT_HASH

// Network constants
const (
	SepoliaNetwork = "sepolia"
	UzhNetwork     = "uzh"
	MainnetNetwork = "mainnet"
)

// Contract name constants
const (
	ProcessRegistryContract                = "processRegistry"
	OrganizationRegistryContract           = "organizationRegistry"
	StateTransitionVerifierGroth16Contract = "stateTransitionVerifierGroth16"
	ResultsVerifierGroth16Contract         = "resultsVerifierGroth16"
	SequencerRegistryContract              = "sequencerRegistry"
)

// Contract addresses by network
const (
EOF

# Generate address constants for each contract and network combination
for contract in $(jq -r 'keys[]' "$JSON_FILE"); do
    # Convert contract name to Go constant format (camelCase to PascalCase)
    contract_const=$(echo "$contract" | sed -r 's/(^|_)([a-z])/\U\2/g')
    
    for network in $(jq -r ".$contract | keys[]" "$JSON_FILE"); do
        # Convert network name to Go constant format
        network_const=$(echo "$network" | sed 's/^./\U&/')
        
        # Get the address
        address=$(jq -r ".$contract.$network" "$JSON_FILE")
        
        # Generate the constant
        echo "	${contract_const}${network_const}Address = \"$address\"" >> "$OUTPUT_FILE"
    done
done

# Close the constants block
echo ")" >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"

# Generate helper functions
cat >> "$OUTPUT_FILE" << 'EOF'
// GetContractAddress returns the address for a given contract and network
func GetContractAddress(contract, network string) string {
	switch contract {
	case ProcessRegistryContract:
		switch network {
		case SepoliaNetwork:
			return ProcessRegistrySepoliaAddress
		case UzhNetwork:
			return ProcessRegistryUzhAddress
		case MainnetNetwork:
			return ProcessRegistryMainnetAddress
		}
	case OrganizationRegistryContract:
		switch network {
		case SepoliaNetwork:
			return OrganizationRegistrySepoliaAddress
		case UzhNetwork:
			return OrganizationRegistryUzhAddress
		case MainnetNetwork:
			return OrganizationRegistryMainnetAddress
		}
	case StateTransitionVerifierGroth16Contract:
		switch network {
		case SepoliaNetwork:
			return StateTransitionVerifierGroth16SepoliaAddress
		case UzhNetwork:
			return StateTransitionVerifierGroth16UzhAddress
		case MainnetNetwork:
			return StateTransitionVerifierGroth16MainnetAddress
		}
	case ResultsVerifierGroth16Contract:
		switch network {
		case SepoliaNetwork:
			return ResultsVerifierGroth16SepoliaAddress
		case UzhNetwork:
			return ResultsVerifierGroth16UzhAddress
		case MainnetNetwork:
			return ResultsVerifierGroth16MainnetAddress
		}
	case SequencerRegistryContract:
		switch network {
		case SepoliaNetwork:
			return SequencerRegistrySepoliaAddress
		case UzhNetwork:
			return SequencerRegistryUzhAddress
		case MainnetNetwork:
			return SequencerRegistryMainnetAddress
		}
	}
	return ""
}

// GetAllContractAddresses returns a map of all contract addresses for a given network
func GetAllContractAddresses(network string) map[string]string {
	addresses := make(map[string]string)
	
	contracts := []string{
		ProcessRegistryContract,
		OrganizationRegistryContract,
		StateTransitionVerifierGroth16Contract,
		ResultsVerifierGroth16Contract,
		SequencerRegistryContract,
	}
	
	for _, contract := range contracts {
		if addr := GetContractAddress(contract, network); addr != "" && addr != "0x0" {
			addresses[contract] = addr
		}
	}
	
	return addresses
}

// GetSepoliaAddresses returns all contract addresses for Sepolia network
func GetSepoliaAddresses() map[string]string {
	return GetAllContractAddresses(SepoliaNetwork)
}

// GetUzhAddresses returns all contract addresses for UZH network
func GetUzhAddresses() map[string]string {
	return GetAllContractAddresses(UzhNetwork)
}

// GetMainnetAddresses returns all contract addresses for Mainnet network
func GetMainnetAddresses() map[string]string {
	return GetAllContractAddresses(MainnetNetwork)
}
EOF

echo "Successfully generated $OUTPUT_FILE with hardcoded contract addresses"
echo "Contract addresses have been extracted from $JSON_FILE and converted to Go constants"
