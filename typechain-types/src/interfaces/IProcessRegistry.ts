/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IProcessRegistry {
  export type EncryptionKeyStruct = { x: BigNumberish; y: BigNumberish };

  export type EncryptionKeyStructOutput = [x: bigint, y: bigint] & {
    x: bigint;
    y: bigint;
  };

  export type BallotModeStruct = {
    costFromWeight: boolean;
    uniqueValues: boolean;
    numFields: BigNumberish;
    costExponent: BigNumberish;
    maxValue: BigNumberish;
    minValue: BigNumberish;
    maxValueSum: BigNumberish;
    minValueSum: BigNumberish;
  };

  export type BallotModeStructOutput = [
    costFromWeight: boolean,
    uniqueValues: boolean,
    numFields: bigint,
    costExponent: bigint,
    maxValue: bigint,
    minValue: bigint,
    maxValueSum: bigint,
    minValueSum: bigint
  ] & {
    costFromWeight: boolean;
    uniqueValues: boolean;
    numFields: bigint;
    costExponent: bigint;
    maxValue: bigint;
    minValue: bigint;
    maxValueSum: bigint;
    minValueSum: bigint;
  };

  export type CensusStruct = {
    censusOrigin: BigNumberish;
    maxVotes: BigNumberish;
    censusRoot: BytesLike;
    censusURI: string;
  };

  export type CensusStructOutput = [
    censusOrigin: bigint,
    maxVotes: bigint,
    censusRoot: string,
    censusURI: string
  ] & {
    censusOrigin: bigint;
    maxVotes: bigint;
    censusRoot: string;
    censusURI: string;
  };

  export type ProcessStruct = {
    status: BigNumberish;
    organizationId: AddressLike;
    encryptionKey: IProcessRegistry.EncryptionKeyStruct;
    latestStateRoot: BigNumberish;
    result: BigNumberish[];
    startTime: BigNumberish;
    duration: BigNumberish;
    voteCount: BigNumberish;
    voteOverwriteCount: BigNumberish;
    creationBlock: BigNumberish;
    batchNumber: BigNumberish;
    metadataURI: string;
    ballotMode: IProcessRegistry.BallotModeStruct;
    census: IProcessRegistry.CensusStruct;
  };

  export type ProcessStructOutput = [
    status: bigint,
    organizationId: string,
    encryptionKey: IProcessRegistry.EncryptionKeyStructOutput,
    latestStateRoot: bigint,
    result: bigint[],
    startTime: bigint,
    duration: bigint,
    voteCount: bigint,
    voteOverwriteCount: bigint,
    creationBlock: bigint,
    batchNumber: bigint,
    metadataURI: string,
    ballotMode: IProcessRegistry.BallotModeStructOutput,
    census: IProcessRegistry.CensusStructOutput
  ] & {
    status: bigint;
    organizationId: string;
    encryptionKey: IProcessRegistry.EncryptionKeyStructOutput;
    latestStateRoot: bigint;
    result: bigint[];
    startTime: bigint;
    duration: bigint;
    voteCount: bigint;
    voteOverwriteCount: bigint;
    creationBlock: bigint;
    batchNumber: bigint;
    metadataURI: string;
    ballotMode: IProcessRegistry.BallotModeStructOutput;
    census: IProcessRegistry.CensusStructOutput;
  };
}

export interface IProcessRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getNextProcessId"
      | "getProcess"
      | "getProcessEndTime"
      | "getRVerifierVKeyHash"
      | "getSTVerifierVKeyHash"
      | "newProcess"
      | "setProcessCensus"
      | "setProcessDuration"
      | "setProcessResults"
      | "setProcessStatus"
      | "submitStateTransition"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CensusUpdated"
      | "ProcessCreated"
      | "ProcessDurationChanged"
      | "ProcessResultsSet"
      | "ProcessStateRootUpdated"
      | "ProcessStatusChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getNextProcessId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProcess",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProcessEndTime",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRVerifierVKeyHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSTVerifierVKeyHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newProcess",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      IProcessRegistry.BallotModeStruct,
      IProcessRegistry.CensusStruct,
      string,
      IProcessRegistry.EncryptionKeyStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setProcessCensus",
    values: [BytesLike, IProcessRegistry.CensusStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setProcessDuration",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProcessResults",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProcessStatus",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitStateTransition",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getNextProcessId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProcess", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProcessEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRVerifierVKeyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSTVerifierVKeyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newProcess", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProcessCensus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProcessDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProcessResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProcessStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitStateTransition",
    data: BytesLike
  ): Result;
}

export namespace CensusUpdatedEvent {
  export type InputTuple = [
    processId: BytesLike,
    censusRoot: BytesLike,
    censusURI: string,
    maxVotes: BigNumberish
  ];
  export type OutputTuple = [
    processId: string,
    censusRoot: string,
    censusURI: string,
    maxVotes: bigint
  ];
  export interface OutputObject {
    processId: string;
    censusRoot: string;
    censusURI: string;
    maxVotes: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProcessCreatedEvent {
  export type InputTuple = [processId: BytesLike, creator: AddressLike];
  export type OutputTuple = [processId: string, creator: string];
  export interface OutputObject {
    processId: string;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProcessDurationChangedEvent {
  export type InputTuple = [processId: BytesLike, duration: BigNumberish];
  export type OutputTuple = [processId: string, duration: bigint];
  export interface OutputObject {
    processId: string;
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProcessResultsSetEvent {
  export type InputTuple = [
    processId: BytesLike,
    sender: AddressLike,
    result: BigNumberish[]
  ];
  export type OutputTuple = [
    processId: string,
    sender: string,
    result: bigint[]
  ];
  export interface OutputObject {
    processId: string;
    sender: string;
    result: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProcessStateRootUpdatedEvent {
  export type InputTuple = [
    processId: BytesLike,
    sender: AddressLike,
    newStateRoot: BigNumberish
  ];
  export type OutputTuple = [
    processId: string,
    sender: string,
    newStateRoot: bigint
  ];
  export interface OutputObject {
    processId: string;
    sender: string;
    newStateRoot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProcessStatusChangedEvent {
  export type InputTuple = [
    processId: BytesLike,
    oldStatus: BigNumberish,
    newStatus: BigNumberish
  ];
  export type OutputTuple = [
    processId: string,
    oldStatus: bigint,
    newStatus: bigint
  ];
  export interface OutputObject {
    processId: string;
    oldStatus: bigint;
    newStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IProcessRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IProcessRegistry;
  waitForDeployment(): Promise<this>;

  interface: IProcessRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getNextProcessId: TypedContractMethod<
    [organizationId: AddressLike],
    [string],
    "view"
  >;

  getProcess: TypedContractMethod<
    [processId: BytesLike],
    [IProcessRegistry.ProcessStructOutput],
    "view"
  >;

  getProcessEndTime: TypedContractMethod<
    [processId: BytesLike],
    [bigint],
    "view"
  >;

  getRVerifierVKeyHash: TypedContractMethod<[], [string], "view">;

  getSTVerifierVKeyHash: TypedContractMethod<[], [string], "view">;

  newProcess: TypedContractMethod<
    [
      status: BigNumberish,
      startTime: BigNumberish,
      duration: BigNumberish,
      ballotMode: IProcessRegistry.BallotModeStruct,
      census: IProcessRegistry.CensusStruct,
      metadata: string,
      encryptionKey: IProcessRegistry.EncryptionKeyStruct,
      initStateRoot: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  setProcessCensus: TypedContractMethod<
    [processId: BytesLike, census: IProcessRegistry.CensusStruct],
    [void],
    "nonpayable"
  >;

  setProcessDuration: TypedContractMethod<
    [processId: BytesLike, duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProcessResults: TypedContractMethod<
    [processId: BytesLike, proof: BytesLike, input: BytesLike],
    [void],
    "nonpayable"
  >;

  setProcessStatus: TypedContractMethod<
    [processId: BytesLike, newStatus: BigNumberish],
    [void],
    "nonpayable"
  >;

  submitStateTransition: TypedContractMethod<
    [processId: BytesLike, proof: BytesLike, input: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getNextProcessId"
  ): TypedContractMethod<[organizationId: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getProcess"
  ): TypedContractMethod<
    [processId: BytesLike],
    [IProcessRegistry.ProcessStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProcessEndTime"
  ): TypedContractMethod<[processId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRVerifierVKeyHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getSTVerifierVKeyHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "newProcess"
  ): TypedContractMethod<
    [
      status: BigNumberish,
      startTime: BigNumberish,
      duration: BigNumberish,
      ballotMode: IProcessRegistry.BallotModeStruct,
      census: IProcessRegistry.CensusStruct,
      metadata: string,
      encryptionKey: IProcessRegistry.EncryptionKeyStruct,
      initStateRoot: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProcessCensus"
  ): TypedContractMethod<
    [processId: BytesLike, census: IProcessRegistry.CensusStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProcessDuration"
  ): TypedContractMethod<
    [processId: BytesLike, duration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProcessResults"
  ): TypedContractMethod<
    [processId: BytesLike, proof: BytesLike, input: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProcessStatus"
  ): TypedContractMethod<
    [processId: BytesLike, newStatus: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitStateTransition"
  ): TypedContractMethod<
    [processId: BytesLike, proof: BytesLike, input: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CensusUpdated"
  ): TypedContractEvent<
    CensusUpdatedEvent.InputTuple,
    CensusUpdatedEvent.OutputTuple,
    CensusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProcessCreated"
  ): TypedContractEvent<
    ProcessCreatedEvent.InputTuple,
    ProcessCreatedEvent.OutputTuple,
    ProcessCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProcessDurationChanged"
  ): TypedContractEvent<
    ProcessDurationChangedEvent.InputTuple,
    ProcessDurationChangedEvent.OutputTuple,
    ProcessDurationChangedEvent.OutputObject
  >;
  getEvent(
    key: "ProcessResultsSet"
  ): TypedContractEvent<
    ProcessResultsSetEvent.InputTuple,
    ProcessResultsSetEvent.OutputTuple,
    ProcessResultsSetEvent.OutputObject
  >;
  getEvent(
    key: "ProcessStateRootUpdated"
  ): TypedContractEvent<
    ProcessStateRootUpdatedEvent.InputTuple,
    ProcessStateRootUpdatedEvent.OutputTuple,
    ProcessStateRootUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProcessStatusChanged"
  ): TypedContractEvent<
    ProcessStatusChangedEvent.InputTuple,
    ProcessStatusChangedEvent.OutputTuple,
    ProcessStatusChangedEvent.OutputObject
  >;

  filters: {
    "CensusUpdated(bytes32,bytes32,string,uint256)": TypedContractEvent<
      CensusUpdatedEvent.InputTuple,
      CensusUpdatedEvent.OutputTuple,
      CensusUpdatedEvent.OutputObject
    >;
    CensusUpdated: TypedContractEvent<
      CensusUpdatedEvent.InputTuple,
      CensusUpdatedEvent.OutputTuple,
      CensusUpdatedEvent.OutputObject
    >;

    "ProcessCreated(bytes32,address)": TypedContractEvent<
      ProcessCreatedEvent.InputTuple,
      ProcessCreatedEvent.OutputTuple,
      ProcessCreatedEvent.OutputObject
    >;
    ProcessCreated: TypedContractEvent<
      ProcessCreatedEvent.InputTuple,
      ProcessCreatedEvent.OutputTuple,
      ProcessCreatedEvent.OutputObject
    >;

    "ProcessDurationChanged(bytes32,uint256)": TypedContractEvent<
      ProcessDurationChangedEvent.InputTuple,
      ProcessDurationChangedEvent.OutputTuple,
      ProcessDurationChangedEvent.OutputObject
    >;
    ProcessDurationChanged: TypedContractEvent<
      ProcessDurationChangedEvent.InputTuple,
      ProcessDurationChangedEvent.OutputTuple,
      ProcessDurationChangedEvent.OutputObject
    >;

    "ProcessResultsSet(bytes32,address,uint256[])": TypedContractEvent<
      ProcessResultsSetEvent.InputTuple,
      ProcessResultsSetEvent.OutputTuple,
      ProcessResultsSetEvent.OutputObject
    >;
    ProcessResultsSet: TypedContractEvent<
      ProcessResultsSetEvent.InputTuple,
      ProcessResultsSetEvent.OutputTuple,
      ProcessResultsSetEvent.OutputObject
    >;

    "ProcessStateRootUpdated(bytes32,address,uint256)": TypedContractEvent<
      ProcessStateRootUpdatedEvent.InputTuple,
      ProcessStateRootUpdatedEvent.OutputTuple,
      ProcessStateRootUpdatedEvent.OutputObject
    >;
    ProcessStateRootUpdated: TypedContractEvent<
      ProcessStateRootUpdatedEvent.InputTuple,
      ProcessStateRootUpdatedEvent.OutputTuple,
      ProcessStateRootUpdatedEvent.OutputObject
    >;

    "ProcessStatusChanged(bytes32,uint8,uint8)": TypedContractEvent<
      ProcessStatusChangedEvent.InputTuple,
      ProcessStatusChangedEvent.OutputTuple,
      ProcessStatusChangedEvent.OutputObject
    >;
    ProcessStatusChanged: TypedContractEvent<
      ProcessStatusChangedEvent.InputTuple,
      ProcessStatusChangedEvent.OutputTuple,
      ProcessStatusChangedEvent.OutputObject
    >;
  };
}
